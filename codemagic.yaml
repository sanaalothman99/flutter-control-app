workflows:
  ios-testflight:
    name: iOS TestFlight (Codemagic)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      cocoapods: default

      # توقيع تلقائي على نفس الـ Bundle ID
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.drd.ecremote

      # لازم تكون المجموعة موجودة وفيها:
      # APP_STORE_API_KEY (Base64 لمحتوى ملف .p8)
      # APP_STORE_KEY_ID
      # APP_STORE_ISSUER_ID
      groups:
        - app_store_connect

    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods
        - ~/Library/Caches/CocoaPods

    scripts:
      - name: Show versions
        script: |
          set -e
          flutter --version
          xcodebuild -version
          pod --version
          ruby --version

      # يكتب Podfile صحيح (يتفادى أخطاء _dir_ و podhelper)
      - name: Ensure valid iOS Podfile
        script: |
          set -e
          cat > ios/Podfile <<'EOF'
          platform :ios, '13.0'
          use_frameworks!
          use_modular_headers!
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          # يستخرج FLUTTER_ROOT من الملف المولد
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('Flutter', 'Generated.xcconfig'), __dir__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
            File.foreach(generated_xcode_build_settings_path) do |line|
              match = line.match(/FLUTTER_ROOT=(.*)/)
              return match[1].strip if match
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try running flutter pub get."
          end

          require File.expand_path(File.join('packages','flutter_tools','bin','podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
            end
          end
          EOF

      - name: Flutter prep
        script: |
          set -e
          flutter clean
          flutter pub get

      - name: iOS Pods (install)
        script: |
          set -e
          cd ios
          rm -rf Pods Podfile.lock
          pod repo update
          pod install
          cd ..

      # حساب رقم البناء وتمريره كمتغير للخطوات التالية
      - name: Compute build number
        script: |
          set -e
          CURRENT=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" ios/Runner/Info.plist 2>/dev/null || echo 0)
          NEW_BUILD_NUMBER=$((CURRENT + 1))
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" | tee -a $CM_ENV
          echo "Will use build number: $NEW_BUILD_NUMBER"

      # جلب الشهادة والبروفايل (App Store) تلقائياً + إضافتها للكي تشين
      - name: Fetch signing files (App Store)
        script: |
          set -e
          app-store-connect fetch-signing-files com.drd.ecremote --type IOS_APP_STORE --create
          keychain add-certificates

      # تفعيل استخدام البروفايلات في مشروع Xcode
      - name: Set up code signing (auto)
        script: |
          set -e
          xcode-project use-profiles

      # بناء IPA عبر Xcode (يضمن إنشاء ipa فعلي)
      - name: Build IPA (release)
        script: |
          set -e
          xcode-project build-ipa \
            --workspace=ios/Runner.xcworkspace \
            --scheme=Runner \
            --archive-flags="-allowProvisioningUpdates" \
            --build-number="$NEW_BUILD_NUMBER"

      # فحص سريع للـ IPA الناتج
      - name: Debug archive contents (post)
        script: |
          set -e
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n 1)
          echo "IPA_PATH=$IPA_PATH"
          TMP=$(mktemp -d)
          unzip -q "$IPA_PATH" -d "$TMP"
          APP="$TMP/Payload/Runner.app"
          echo "Bundle ID:"; /usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" "$APP/Info.plist" || true
          test -f "$APP/embedded.mobileprovision" && echo "embedded.mobileprovision FOUND" || echo "embedded.mobileprovision MISSING"

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_API_KEY      # محتوى ملف .p8 مشفّر Base64
        key_id: $APP_STORE_KEY_ID
        issuer_id: $APP_STORE_ISSUER_ID
        submit_to_testflight: true